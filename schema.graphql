# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type MapLayer {
  id: ID!
  name: String
  description: JSON
  featurePropertySchema: JSON
  parentMapLayer: MapLayer
  features(where: MapFeatureWhereInput! = {}, orderBy: [MapFeatureOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MapFeatureWhereUniqueInput): [MapFeature!]
  featuresCount(where: MapFeatureWhereInput! = {}): Int
}

input MapLayerWhereUniqueInput {
  id: ID
}

input MapLayerWhereInput {
  AND: [MapLayerWhereInput!]
  OR: [MapLayerWhereInput!]
  NOT: [MapLayerWhereInput!]
  id: IDFilter
  name: StringFilter
  parentMapLayer: MapLayerWhereInput
  features: MapFeatureManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input MapFeatureManyRelationFilter {
  every: MapFeatureWhereInput
  some: MapFeatureWhereInput
  none: MapFeatureWhereInput
}

input MapLayerOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input MapLayerUpdateInput {
  name: String
  description: JSON
  featurePropertySchema: JSON
  parentMapLayer: MapLayerRelateToOneForUpdateInput
  features: MapFeatureRelateToManyForUpdateInput
}

input MapLayerRelateToOneForUpdateInput {
  create: MapLayerCreateInput
  connect: MapLayerWhereUniqueInput
  disconnect: Boolean
}

input MapFeatureRelateToManyForUpdateInput {
  disconnect: [MapFeatureWhereUniqueInput!]
  set: [MapFeatureWhereUniqueInput!]
  create: [MapFeatureCreateInput!]
  connect: [MapFeatureWhereUniqueInput!]
}

input MapLayerUpdateArgs {
  where: MapLayerWhereUniqueInput!
  data: MapLayerUpdateInput!
}

input MapLayerCreateInput {
  name: String
  description: JSON
  featurePropertySchema: JSON
  parentMapLayer: MapLayerRelateToOneForCreateInput
  features: MapFeatureRelateToManyForCreateInput
}

input MapLayerRelateToOneForCreateInput {
  create: MapLayerCreateInput
  connect: MapLayerWhereUniqueInput
}

input MapFeatureRelateToManyForCreateInput {
  create: [MapFeatureCreateInput!]
  connect: [MapFeatureWhereUniqueInput!]
}

type MapFeature {
  id: ID!
  mapLayer: MapLayer
  name: String
  geometry: JSON
  properties_raw(where: MapFeaturePropertyWhereInput! = {}, orderBy: [MapFeaturePropertyOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MapFeaturePropertyWhereUniqueInput): [MapFeatureProperty!]
  properties_rawCount(where: MapFeaturePropertyWhereInput! = {}): Int
  properties: JSON
}

input MapFeatureWhereUniqueInput {
  id: ID
}

input MapFeatureWhereInput {
  AND: [MapFeatureWhereInput!]
  OR: [MapFeatureWhereInput!]
  NOT: [MapFeatureWhereInput!]
  id: IDFilter
  mapLayer: MapLayerWhereInput
  name: StringFilter
  properties_raw: MapFeaturePropertyManyRelationFilter
}

input MapFeaturePropertyManyRelationFilter {
  every: MapFeaturePropertyWhereInput
  some: MapFeaturePropertyWhereInput
  none: MapFeaturePropertyWhereInput
}

input MapFeatureOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input MapFeatureUpdateInput {
  mapLayer: MapLayerRelateToOneForUpdateInput
  name: String
  geometry: JSON
  properties_raw: MapFeaturePropertyRelateToManyForUpdateInput
  properties: JSON
}

input MapFeaturePropertyRelateToManyForUpdateInput {
  disconnect: [MapFeaturePropertyWhereUniqueInput!]
  set: [MapFeaturePropertyWhereUniqueInput!]
  create: [MapFeaturePropertyCreateInput!]
  connect: [MapFeaturePropertyWhereUniqueInput!]
}

input MapFeatureUpdateArgs {
  where: MapFeatureWhereUniqueInput!
  data: MapFeatureUpdateInput!
}

input MapFeatureCreateInput {
  mapLayer: MapLayerRelateToOneForCreateInput
  name: String
  geometry: JSON
  properties_raw: MapFeaturePropertyRelateToManyForCreateInput
  properties: JSON
}

input MapFeaturePropertyRelateToManyForCreateInput {
  create: [MapFeaturePropertyCreateInput!]
  connect: [MapFeaturePropertyWhereUniqueInput!]
}

type MapFeatureProperty {
  id: ID!
  mapFeature: MapFeature
  key: String
  type: String
  value_text: String
  value_number: Float
}

input MapFeaturePropertyWhereUniqueInput {
  id: ID
}

input MapFeaturePropertyWhereInput {
  AND: [MapFeaturePropertyWhereInput!]
  OR: [MapFeaturePropertyWhereInput!]
  NOT: [MapFeaturePropertyWhereInput!]
  id: IDFilter
  mapFeature: MapFeatureWhereInput
  key: StringFilter
  type: StringNullableFilter
  value_text: StringFilter
  value_number: FloatNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: StringNullableFilter
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatNullableFilter
}

input MapFeaturePropertyOrderByInput {
  id: OrderDirection
  key: OrderDirection
  type: OrderDirection
  value_text: OrderDirection
  value_number: OrderDirection
}

input MapFeaturePropertyUpdateInput {
  mapFeature: MapFeatureRelateToOneForUpdateInput
  key: String
  type: String
  value_text: String
  value_number: Float
}

input MapFeatureRelateToOneForUpdateInput {
  create: MapFeatureCreateInput
  connect: MapFeatureWhereUniqueInput
  disconnect: Boolean
}

input MapFeaturePropertyUpdateArgs {
  where: MapFeaturePropertyWhereUniqueInput!
  data: MapFeaturePropertyUpdateInput!
}

input MapFeaturePropertyCreateInput {
  mapFeature: MapFeatureRelateToOneForCreateInput
  key: String
  type: String
  value_text: String
  value_number: Float
}

input MapFeatureRelateToOneForCreateInput {
  create: MapFeatureCreateInput
  connect: MapFeatureWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createMapLayer(data: MapLayerCreateInput!): MapLayer
  createMapLayers(data: [MapLayerCreateInput!]!): [MapLayer]
  updateMapLayer(where: MapLayerWhereUniqueInput!, data: MapLayerUpdateInput!): MapLayer
  updateMapLayers(data: [MapLayerUpdateArgs!]!): [MapLayer]
  deleteMapLayer(where: MapLayerWhereUniqueInput!): MapLayer
  deleteMapLayers(where: [MapLayerWhereUniqueInput!]!): [MapLayer]
  createMapFeature(data: MapFeatureCreateInput!): MapFeature
  createMapFeatures(data: [MapFeatureCreateInput!]!): [MapFeature]
  updateMapFeature(where: MapFeatureWhereUniqueInput!, data: MapFeatureUpdateInput!): MapFeature
  updateMapFeatures(data: [MapFeatureUpdateArgs!]!): [MapFeature]
  deleteMapFeature(where: MapFeatureWhereUniqueInput!): MapFeature
  deleteMapFeatures(where: [MapFeatureWhereUniqueInput!]!): [MapFeature]
  createMapFeatureProperty(data: MapFeaturePropertyCreateInput!): MapFeatureProperty
  createMapFeatureProperties(data: [MapFeaturePropertyCreateInput!]!): [MapFeatureProperty]
  updateMapFeatureProperty(where: MapFeaturePropertyWhereUniqueInput!, data: MapFeaturePropertyUpdateInput!): MapFeatureProperty
  updateMapFeatureProperties(data: [MapFeaturePropertyUpdateArgs!]!): [MapFeatureProperty]
  deleteMapFeatureProperty(where: MapFeaturePropertyWhereUniqueInput!): MapFeatureProperty
  deleteMapFeatureProperties(where: [MapFeaturePropertyWhereUniqueInput!]!): [MapFeatureProperty]
}

type Query {
  mapLayer(where: MapLayerWhereUniqueInput!): MapLayer
  mapLayers(where: MapLayerWhereInput! = {}, orderBy: [MapLayerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MapLayerWhereUniqueInput): [MapLayer!]
  mapLayersCount(where: MapLayerWhereInput! = {}): Int
  mapFeature(where: MapFeatureWhereUniqueInput!): MapFeature
  mapFeatures(where: MapFeatureWhereInput! = {}, orderBy: [MapFeatureOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MapFeatureWhereUniqueInput): [MapFeature!]
  mapFeaturesCount(where: MapFeatureWhereInput! = {}): Int
  mapFeatureProperty(where: MapFeaturePropertyWhereUniqueInput!): MapFeatureProperty
  mapFeatureProperties(where: MapFeaturePropertyWhereInput! = {}, orderBy: [MapFeaturePropertyOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MapFeaturePropertyWhereUniqueInput): [MapFeatureProperty!]
  mapFeaturePropertiesCount(where: MapFeaturePropertyWhereInput! = {}): Int
  keystone: KeystoneMeta!

  """ stats(id: ID!): Statistics """
  geometryQuery(containerGeometry: JSON!): JSON
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
